/*Package contractor - Automatically generated by cinp-codegen from /api/v1/Directory/ at 2020-02-24T22:51:21.147599
 */
package contractor

import (
	"reflect"
	"time"
	cinp "github.com/cinp/go"
)

//DirectoryZone - Model Zone(/api/v1/Directory/Zone)
/*
Zone(name, parent, ttl, refresh, retry, expire, minimum, updated, created)
 */
type DirectoryZone struct {
	cinp.BaseObject
  cinp *cinp.CInP
	Name string `json:"name"` // String
	Parent string `json:"parent"` // Model
	TTL string `json:"ttl"` // Integer
	Refresh string `json:"refresh"` // Integer
	Retry string `json:"retry"` // Integer
	Expire string `json:"expire"` // Integer
	Minimum string `json:"minimum"` // Integer
	Updated time.Time `json:"updated"` // DateTime
	Created time.Time `json:"created"` // DateTime
	Fqdn string `json:"fqdn"` // String
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *DirectoryZone) AsMap() *map[string]interface{} {
	return &map[string]interface{}{ 
	"name": object.Name,
	"parent": object.Parent,
	"ttl": object.TTL,
	"refresh": object.Refresh,
	"retry": object.Retry,
	"expire": object.Expire,
	"minimum": object.Minimum,
	"updated": object.Updated,
	"created": object.Created,
	"fqdn": object.Fqdn,
	}
}

// DirectoryZoneNew - Make a new object of Model Zone
func (service *Contractor) DirectoryZoneNew() *DirectoryZone {
	return &DirectoryZone{cinp: service.cinp}
}

// DirectoryZoneNewWithID - Make a new object of Model Zone
func (service *Contractor) DirectoryZoneNewWithID(id string) *DirectoryZone {
	result := DirectoryZone{cinp: service.cinp}
	result.SetID("/api/v1/Directory/Zone:"+id+":")
	return &result
}

// DirectoryZoneGet - Get function for Model Zone
func (service *Contractor) DirectoryZoneGet(id string) (*DirectoryZone, error) {
	//object := DirectoryZone{cinp: service.cinp}

	object, err := service.cinp.Get("/api/v1/Directory/Zone:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*DirectoryZone)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model Zone
func (object *DirectoryZone) Create() error {
	if err := object.cinp.Create("/api/v1/Directory/Zone", object); err != nil {
		return err
	}

	return nil
}

// Update - Update function for Model Zone
func (object *DirectoryZone) Update(fieldList []string) error {
	if err := object.cinp.Update(object, fieldList); err != nil {
		return err
	}

	return nil
}

// Delete - Delete function for Model Zone
func (object *DirectoryZone) Delete() error {
	if err := object.cinp.Delete(object); err != nil {
		return err
	}

	return nil
}

// DirectoryZoneList - List function for Model Zone
func (service *Contractor) DirectoryZoneList(filterName string, filterValues map[string]interface{}) <-chan *DirectoryZone {
	in := service.cinp.ListObjects("/api/v1/Directory/Zone", reflect.TypeOf(DirectoryZone{}), filterName, filterValues, 50)
	out := make(chan *DirectoryZone)
	go func() {
		defer close(out)
		object, ok := (<-in).(*DirectoryZone)
		if ok {
			out <- object
		}
	}()
	return out
}


//DirectoryEntry - Model Entry(/api/v1/Directory/Entry)
/*
Entry(id, zone, type, name, priority, weight, port, target, updated, created)
 */
type DirectoryEntry struct {
	cinp.BaseObject
  cinp *cinp.CInP
	Zone string `json:"zone"` // Model
	Type string `json:"type"` // String
	Name string `json:"name"` // String
	Priority string `json:"priority"` // Integer
	Weight string `json:"weight"` // Integer
	Port string `json:"port"` // Integer
	Target string `json:"target"` // String
	Updated time.Time `json:"updated"` // DateTime
	Created time.Time `json:"created"` // DateTime
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *DirectoryEntry) AsMap() *map[string]interface{} {
	return &map[string]interface{}{ 
	"zone": object.Zone,
	"type": object.Type,
	"name": object.Name,
	"priority": object.Priority,
	"weight": object.Weight,
	"port": object.Port,
	"target": object.Target,
	"updated": object.Updated,
	"created": object.Created,
	}
}

// DirectoryEntryNew - Make a new object of Model Entry
func (service *Contractor) DirectoryEntryNew() *DirectoryEntry {
	return &DirectoryEntry{cinp: service.cinp}
}

// DirectoryEntryNewWithID - Make a new object of Model Entry
func (service *Contractor) DirectoryEntryNewWithID(id string) *DirectoryEntry {
	result := DirectoryEntry{cinp: service.cinp}
	result.SetID("/api/v1/Directory/Entry:"+id+":")
	return &result
}

// DirectoryEntryGet - Get function for Model Entry
func (service *Contractor) DirectoryEntryGet(id string) (*DirectoryEntry, error) {
	//object := DirectoryEntry{cinp: service.cinp}

	object, err := service.cinp.Get("/api/v1/Directory/Entry:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*DirectoryEntry)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model Entry
func (object *DirectoryEntry) Create() error {
	if err := object.cinp.Create("/api/v1/Directory/Entry", object); err != nil {
		return err
	}

	return nil
}

// Update - Update function for Model Entry
func (object *DirectoryEntry) Update(fieldList []string) error {
	if err := object.cinp.Update(object, fieldList); err != nil {
		return err
	}

	return nil
}

// Delete - Delete function for Model Entry
func (object *DirectoryEntry) Delete() error {
	if err := object.cinp.Delete(object); err != nil {
		return err
	}

	return nil
}

// DirectoryEntryList - List function for Model Entry
func (service *Contractor) DirectoryEntryList(filterName string, filterValues map[string]interface{}) <-chan *DirectoryEntry {
	in := service.cinp.ListObjects("/api/v1/Directory/Entry", reflect.TypeOf(DirectoryEntry{}), filterName, filterValues, 50)
	out := make(chan *DirectoryEntry)
	go func() {
		defer close(out)
		object, ok := (<-in).(*DirectoryEntry)
		if ok {
			out <- object
		}
	}()
	return out
}

func registerDirectory(cinp *cinp.CInP) { 
	cinp.RegisterType("/api/v1/Directory/Zone", reflect.TypeOf((*DirectoryZone)(nil)).Elem())
	cinp.RegisterType("/api/v1/Directory/Entry", reflect.TypeOf((*DirectoryEntry)(nil)).Elem())
}