/*Package contractor - Automatically generated by cinp-codegen from /api/v1/Foreman/ at 2020-02-24T22:51:21.147599
 */
package contractor

import (
	"reflect"
	"time"
	cinp "github.com/cinp/go"
)

//ForemanBaseJob - Model BaseJob(/api/v1/Foreman/BaseJob)
/*
BaseJob(id, site, state, status, message, script_runner, script_name, updated, created)
 */
type ForemanBaseJob struct {
	cinp.BaseObject
  cinp *cinp.CInP
	Site string `json:"site"` // Model
	State string `json:"state"` // String
	Status string `json:"status"` // String
	Message string `json:"message"` // String
	ScriptName string `json:"script_name"` // String
	Updated time.Time `json:"updated"` // DateTime
	Created time.Time `json:"created"` // DateTime
	Progress string `json:"progress"` // String
	CanStart string `json:"can_start"` // String
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *ForemanBaseJob) AsMap() *map[string]interface{} {
	return &map[string]interface{}{ 
	"site": object.Site,
	"state": object.State,
	"status": object.Status,
	"message": object.Message,
	"script_name": object.ScriptName,
	"updated": object.Updated,
	"created": object.Created,
	"progress": object.Progress,
	"can_start": object.CanStart,
	}
}

// ForemanBaseJobNew - Make a new object of Model BaseJob
func (service *Contractor) ForemanBaseJobNew() *ForemanBaseJob {
	return &ForemanBaseJob{cinp: service.cinp}
}

// ForemanBaseJobNewWithID - Make a new object of Model BaseJob
func (service *Contractor) ForemanBaseJobNewWithID(id string) *ForemanBaseJob {
	result := ForemanBaseJob{cinp: service.cinp}
	result.SetID("/api/v1/Foreman/BaseJob:"+id+":")
	return &result
}

// ForemanBaseJobGet - Get function for Model BaseJob
func (service *Contractor) ForemanBaseJobGet(id string) (*ForemanBaseJob, error) {
	//object := ForemanBaseJob{cinp: service.cinp}

	object, err := service.cinp.Get("/api/v1/Foreman/BaseJob:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*ForemanBaseJob)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model BaseJob
func (object *ForemanBaseJob) Create() error {
	if err := object.cinp.Create("/api/v1/Foreman/BaseJob", object); err != nil {
		return err
	}

	return nil
}

// Update - Update function for Model BaseJob
func (object *ForemanBaseJob) Update(fieldList []string) error {
	if err := object.cinp.Update(object, fieldList); err != nil {
		return err
	}

	return nil
}

// Delete - Delete function for Model BaseJob
func (object *ForemanBaseJob) Delete() error {
	if err := object.cinp.Delete(object); err != nil {
		return err
	}

	return nil
}

// ForemanBaseJobList - List function for Model BaseJob
func (service *Contractor) ForemanBaseJobList(filterName string, filterValues map[string]interface{}) <-chan *ForemanBaseJob {
	in := service.cinp.ListObjects("/api/v1/Foreman/BaseJob", reflect.TypeOf(ForemanBaseJob{}), filterName, filterValues, 50)
	out := make(chan *ForemanBaseJob)
	go func() {
		defer close(out)
		object, ok := (<-in).(*ForemanBaseJob)
		if ok {
			out <- object
		}
	}()
	return out
}

// CallPause calls pause
func (object *ForemanBaseJob) CallPause() (string, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return "", err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/BaseJob(pause)", ids)
	if err != nil {
		return "", err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// CallResume calls resume
func (object *ForemanBaseJob) CallResume() (string, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return "", err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/BaseJob(resume)", ids)
	if err != nil {
		return "", err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// CallReset calls reset
func (object *ForemanBaseJob) CallReset() (string, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return "", err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/BaseJob(reset)", ids)
	if err != nil {
		return "", err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// CallRollback calls rollback
func (object *ForemanBaseJob) CallRollback() (string, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return "", err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/BaseJob(rollback)", ids)
	if err != nil {
		return "", err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// CallClear_dispatched calls clear_dispatched
func (object *ForemanBaseJob) CallClear_dispatched() (string, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return "", err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/BaseJob(clear_dispatched)", ids)
	if err != nil {
		return "", err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// ForemanBaseJobCallJobStats calls jobStatsNone
func (service *Contractor) ForemanBaseJobCallJobStats(site string) (map[string]interface{}, error) {
	args := map[string]interface{}{ 
		"site": site,
}
	uri := "/api/v1/Foreman/BaseJob(jobStats)"

	result := map[string]interface{}{}

	if err := service.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// CallJobRunnerVariables calls jobRunnerVariables
func (object *ForemanBaseJob) CallJobRunnerVariables() (map[string]interface{}, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/BaseJob(jobRunnerVariables)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// CallJobRunnerState calls jobRunnerState
func (object *ForemanBaseJob) CallJobRunnerState() (map[string]interface{}, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/BaseJob(jobRunnerState)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}


//ForemanFoundationJob - Model FoundationJob(/api/v1/Foreman/FoundationJob)
/*
FoundationJob(id, site, state, status, message, script_runner, script_name, updated, created, basejob_ptr, foundation)
 */
type ForemanFoundationJob struct {
	cinp.BaseObject
  cinp *cinp.CInP
	Site string `json:"site"` // Model
	State string `json:"state"` // String
	Status string `json:"status"` // String
	Message string `json:"message"` // String
	ScriptName string `json:"script_name"` // String
	Updated time.Time `json:"updated"` // DateTime
	Created time.Time `json:"created"` // DateTime
	Foundation string `json:"foundation"` // Model
	Progress string `json:"progress"` // String
	CanStart string `json:"can_start"` // String
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *ForemanFoundationJob) AsMap() *map[string]interface{} {
	return &map[string]interface{}{ 
	"site": object.Site,
	"state": object.State,
	"status": object.Status,
	"message": object.Message,
	"script_name": object.ScriptName,
	"updated": object.Updated,
	"created": object.Created,
	"foundation": object.Foundation,
	"progress": object.Progress,
	"can_start": object.CanStart,
	}
}

// ForemanFoundationJobNew - Make a new object of Model FoundationJob
func (service *Contractor) ForemanFoundationJobNew() *ForemanFoundationJob {
	return &ForemanFoundationJob{cinp: service.cinp}
}

// ForemanFoundationJobNewWithID - Make a new object of Model FoundationJob
func (service *Contractor) ForemanFoundationJobNewWithID(id string) *ForemanFoundationJob {
	result := ForemanFoundationJob{cinp: service.cinp}
	result.SetID("/api/v1/Foreman/FoundationJob:"+id+":")
	return &result
}

// ForemanFoundationJobGet - Get function for Model FoundationJob
func (service *Contractor) ForemanFoundationJobGet(id string) (*ForemanFoundationJob, error) {
	//object := ForemanFoundationJob{cinp: service.cinp}

	object, err := service.cinp.Get("/api/v1/Foreman/FoundationJob:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*ForemanFoundationJob)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model FoundationJob
func (object *ForemanFoundationJob) Create() error {
	if err := object.cinp.Create("/api/v1/Foreman/FoundationJob", object); err != nil {
		return err
	}

	return nil
}

// Update - Update function for Model FoundationJob
func (object *ForemanFoundationJob) Update(fieldList []string) error {
	if err := object.cinp.Update(object, fieldList); err != nil {
		return err
	}

	return nil
}

// Delete - Delete function for Model FoundationJob
func (object *ForemanFoundationJob) Delete() error {
	if err := object.cinp.Delete(object); err != nil {
		return err
	}

	return nil
}

// ForemanFoundationJobList - List function for Model FoundationJob
func (service *Contractor) ForemanFoundationJobList(filterName string, filterValues map[string]interface{}) <-chan *ForemanFoundationJob {
	in := service.cinp.ListObjects("/api/v1/Foreman/FoundationJob", reflect.TypeOf(ForemanFoundationJob{}), filterName, filterValues, 50)
	out := make(chan *ForemanFoundationJob)
	go func() {
		defer close(out)
		object, ok := (<-in).(*ForemanFoundationJob)
		if ok {
			out <- object
		}
	}()
	return out
}

// CallPause calls pause
func (object *ForemanFoundationJob) CallPause() (string, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return "", err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/FoundationJob(pause)", ids)
	if err != nil {
		return "", err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// CallResume calls resume
func (object *ForemanFoundationJob) CallResume() (string, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return "", err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/FoundationJob(resume)", ids)
	if err != nil {
		return "", err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// CallReset calls reset
func (object *ForemanFoundationJob) CallReset() (string, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return "", err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/FoundationJob(reset)", ids)
	if err != nil {
		return "", err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// CallRollback calls rollback
func (object *ForemanFoundationJob) CallRollback() (string, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return "", err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/FoundationJob(rollback)", ids)
	if err != nil {
		return "", err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// CallJobRunnerVariables calls jobRunnerVariables
func (object *ForemanFoundationJob) CallJobRunnerVariables() (map[string]interface{}, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/FoundationJob(jobRunnerVariables)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// CallJobRunnerState calls jobRunnerState
func (object *ForemanFoundationJob) CallJobRunnerState() (map[string]interface{}, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/FoundationJob(jobRunnerState)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// ForemanFoundationJobCallGetFoundationJob calls getFoundationJobNone
func (service *Contractor) ForemanFoundationJobCallGetFoundationJob(foundation string) (string, error) {
	args := map[string]interface{}{ 
		"foundation": foundation,
}
	uri := "/api/v1/Foreman/FoundationJob(getFoundationJob)"

	result := ""

	if err := service.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}


//ForemanStructureJob - Model StructureJob(/api/v1/Foreman/StructureJob)
/*
StructureJob(id, site, state, status, message, script_runner, script_name, updated, created, basejob_ptr, structure)
 */
type ForemanStructureJob struct {
	cinp.BaseObject
  cinp *cinp.CInP
	Site string `json:"site"` // Model
	State string `json:"state"` // String
	Status string `json:"status"` // String
	Message string `json:"message"` // String
	ScriptName string `json:"script_name"` // String
	Updated time.Time `json:"updated"` // DateTime
	Created time.Time `json:"created"` // DateTime
	Structure string `json:"structure"` // Model
	Progress string `json:"progress"` // String
	CanStart string `json:"can_start"` // String
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *ForemanStructureJob) AsMap() *map[string]interface{} {
	return &map[string]interface{}{ 
	"site": object.Site,
	"state": object.State,
	"status": object.Status,
	"message": object.Message,
	"script_name": object.ScriptName,
	"updated": object.Updated,
	"created": object.Created,
	"structure": object.Structure,
	"progress": object.Progress,
	"can_start": object.CanStart,
	}
}

// ForemanStructureJobNew - Make a new object of Model StructureJob
func (service *Contractor) ForemanStructureJobNew() *ForemanStructureJob {
	return &ForemanStructureJob{cinp: service.cinp}
}

// ForemanStructureJobNewWithID - Make a new object of Model StructureJob
func (service *Contractor) ForemanStructureJobNewWithID(id string) *ForemanStructureJob {
	result := ForemanStructureJob{cinp: service.cinp}
	result.SetID("/api/v1/Foreman/StructureJob:"+id+":")
	return &result
}

// ForemanStructureJobGet - Get function for Model StructureJob
func (service *Contractor) ForemanStructureJobGet(id string) (*ForemanStructureJob, error) {
	//object := ForemanStructureJob{cinp: service.cinp}

	object, err := service.cinp.Get("/api/v1/Foreman/StructureJob:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*ForemanStructureJob)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model StructureJob
func (object *ForemanStructureJob) Create() error {
	if err := object.cinp.Create("/api/v1/Foreman/StructureJob", object); err != nil {
		return err
	}

	return nil
}

// Update - Update function for Model StructureJob
func (object *ForemanStructureJob) Update(fieldList []string) error {
	if err := object.cinp.Update(object, fieldList); err != nil {
		return err
	}

	return nil
}

// Delete - Delete function for Model StructureJob
func (object *ForemanStructureJob) Delete() error {
	if err := object.cinp.Delete(object); err != nil {
		return err
	}

	return nil
}

// ForemanStructureJobList - List function for Model StructureJob
func (service *Contractor) ForemanStructureJobList(filterName string, filterValues map[string]interface{}) <-chan *ForemanStructureJob {
	in := service.cinp.ListObjects("/api/v1/Foreman/StructureJob", reflect.TypeOf(ForemanStructureJob{}), filterName, filterValues, 50)
	out := make(chan *ForemanStructureJob)
	go func() {
		defer close(out)
		object, ok := (<-in).(*ForemanStructureJob)
		if ok {
			out <- object
		}
	}()
	return out
}

// CallPause calls pause
func (object *ForemanStructureJob) CallPause() (string, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return "", err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/StructureJob(pause)", ids)
	if err != nil {
		return "", err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// CallResume calls resume
func (object *ForemanStructureJob) CallResume() (string, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return "", err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/StructureJob(resume)", ids)
	if err != nil {
		return "", err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// CallReset calls reset
func (object *ForemanStructureJob) CallReset() (string, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return "", err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/StructureJob(reset)", ids)
	if err != nil {
		return "", err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// CallRollback calls rollback
func (object *ForemanStructureJob) CallRollback() (string, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return "", err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/StructureJob(rollback)", ids)
	if err != nil {
		return "", err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// CallJobRunnerVariables calls jobRunnerVariables
func (object *ForemanStructureJob) CallJobRunnerVariables() (map[string]interface{}, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/StructureJob(jobRunnerVariables)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// CallJobRunnerState calls jobRunnerState
func (object *ForemanStructureJob) CallJobRunnerState() (map[string]interface{}, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/StructureJob(jobRunnerState)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// ForemanStructureJobCallGetStructureJob calls getStructureJobNone
func (service *Contractor) ForemanStructureJobCallGetStructureJob(structure string) (string, error) {
	args := map[string]interface{}{ 
		"structure": structure,
}
	uri := "/api/v1/Foreman/StructureJob(getStructureJob)"

	result := ""

	if err := service.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}


//ForemanDependencyJob - Model DependencyJob(/api/v1/Foreman/DependencyJob)
/*
DependencyJob(id, site, state, status, message, script_runner, script_name, updated, created, basejob_ptr, dependency)
 */
type ForemanDependencyJob struct {
	cinp.BaseObject
  cinp *cinp.CInP
	Site string `json:"site"` // Model
	State string `json:"state"` // String
	Status string `json:"status"` // String
	Message string `json:"message"` // String
	ScriptName string `json:"script_name"` // String
	Updated time.Time `json:"updated"` // DateTime
	Created time.Time `json:"created"` // DateTime
	Dependency string `json:"dependency"` // Model
	Progress string `json:"progress"` // String
	CanStart string `json:"can_start"` // String
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *ForemanDependencyJob) AsMap() *map[string]interface{} {
	return &map[string]interface{}{ 
	"site": object.Site,
	"state": object.State,
	"status": object.Status,
	"message": object.Message,
	"script_name": object.ScriptName,
	"updated": object.Updated,
	"created": object.Created,
	"dependency": object.Dependency,
	"progress": object.Progress,
	"can_start": object.CanStart,
	}
}

// ForemanDependencyJobNew - Make a new object of Model DependencyJob
func (service *Contractor) ForemanDependencyJobNew() *ForemanDependencyJob {
	return &ForemanDependencyJob{cinp: service.cinp}
}

// ForemanDependencyJobNewWithID - Make a new object of Model DependencyJob
func (service *Contractor) ForemanDependencyJobNewWithID(id string) *ForemanDependencyJob {
	result := ForemanDependencyJob{cinp: service.cinp}
	result.SetID("/api/v1/Foreman/DependencyJob:"+id+":")
	return &result
}

// ForemanDependencyJobGet - Get function for Model DependencyJob
func (service *Contractor) ForemanDependencyJobGet(id string) (*ForemanDependencyJob, error) {
	//object := ForemanDependencyJob{cinp: service.cinp}

	object, err := service.cinp.Get("/api/v1/Foreman/DependencyJob:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*ForemanDependencyJob)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model DependencyJob
func (object *ForemanDependencyJob) Create() error {
	if err := object.cinp.Create("/api/v1/Foreman/DependencyJob", object); err != nil {
		return err
	}

	return nil
}

// Update - Update function for Model DependencyJob
func (object *ForemanDependencyJob) Update(fieldList []string) error {
	if err := object.cinp.Update(object, fieldList); err != nil {
		return err
	}

	return nil
}

// Delete - Delete function for Model DependencyJob
func (object *ForemanDependencyJob) Delete() error {
	if err := object.cinp.Delete(object); err != nil {
		return err
	}

	return nil
}

// ForemanDependencyJobList - List function for Model DependencyJob
func (service *Contractor) ForemanDependencyJobList(filterName string, filterValues map[string]interface{}) <-chan *ForemanDependencyJob {
	in := service.cinp.ListObjects("/api/v1/Foreman/DependencyJob", reflect.TypeOf(ForemanDependencyJob{}), filterName, filterValues, 50)
	out := make(chan *ForemanDependencyJob)
	go func() {
		defer close(out)
		object, ok := (<-in).(*ForemanDependencyJob)
		if ok {
			out <- object
		}
	}()
	return out
}

// CallPause calls pause
func (object *ForemanDependencyJob) CallPause() (string, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return "", err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/DependencyJob(pause)", ids)
	if err != nil {
		return "", err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// CallResume calls resume
func (object *ForemanDependencyJob) CallResume() (string, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return "", err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/DependencyJob(resume)", ids)
	if err != nil {
		return "", err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// CallReset calls reset
func (object *ForemanDependencyJob) CallReset() (string, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return "", err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/DependencyJob(reset)", ids)
	if err != nil {
		return "", err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// CallRollback calls rollback
func (object *ForemanDependencyJob) CallRollback() (string, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return "", err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/DependencyJob(rollback)", ids)
	if err != nil {
		return "", err
	}

	result := ""

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}

// CallJobRunnerVariables calls jobRunnerVariables
func (object *ForemanDependencyJob) CallJobRunnerVariables() (map[string]interface{}, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/DependencyJob(jobRunnerVariables)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// CallJobRunnerState calls jobRunnerState
func (object *ForemanDependencyJob) CallJobRunnerState() (map[string]interface{}, error) {
	args := map[string]interface{}{ }
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return nil, err
	}
	uri, err := object.cinp.UpdateIDs("/api/v1/Foreman/DependencyJob(jobRunnerState)", ids)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{}

	if err := object.cinp.Call(uri, &args, &result); err != nil {
		return nil, err
	}

	return result, nil
}

// ForemanDependencyJobCallGetDependencyJob calls getDependencyJobNone
func (service *Contractor) ForemanDependencyJobCallGetDependencyJob(dependency string) (string, error) {
	args := map[string]interface{}{ 
		"dependency": dependency,
}
	uri := "/api/v1/Foreman/DependencyJob(getDependencyJob)"

	result := ""

	if err := service.cinp.Call(uri, &args, &result); err != nil {
		return "", err
	}

	return result, nil
}


//ForemanJobLog - Model JobLog(/api/v1/Foreman/JobLog)
/*
JobLog(id, site, job_id, target_class, target_description, script_name, creator, started_at, finished_at, canceled_by, canceled_at, updated, created)
 */
type ForemanJobLog struct {
	cinp.BaseObject
  cinp *cinp.CInP
	Site string `json:"site"` // Model
	JobID string `json:"job_id"` // Integer
	TargetClass string `json:"target_class"` // String
	TargetDescription string `json:"target_description"` // String
	ScriptName string `json:"script_name"` // String
	Creator string `json:"creator"` // String
	StartedAt time.Time `json:"started_at"` // DateTime
	FinishedAt time.Time `json:"finished_at"` // DateTime
	CanceledBy string `json:"canceled_by"` // String
	CanceledAt time.Time `json:"canceled_at"` // DateTime
	Updated time.Time `json:"updated"` // DateTime
	Created time.Time `json:"created"` // DateTime
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *ForemanJobLog) AsMap() *map[string]interface{} {
	return &map[string]interface{}{ 
	"site": object.Site,
	"job_id": object.JobID,
	"target_class": object.TargetClass,
	"target_description": object.TargetDescription,
	"script_name": object.ScriptName,
	"creator": object.Creator,
	"started_at": object.StartedAt,
	"finished_at": object.FinishedAt,
	"canceled_by": object.CanceledBy,
	"canceled_at": object.CanceledAt,
	"updated": object.Updated,
	"created": object.Created,
	}
}

// ForemanJobLogNew - Make a new object of Model JobLog
func (service *Contractor) ForemanJobLogNew() *ForemanJobLog {
	return &ForemanJobLog{cinp: service.cinp}
}

// ForemanJobLogNewWithID - Make a new object of Model JobLog
func (service *Contractor) ForemanJobLogNewWithID(id string) *ForemanJobLog {
	result := ForemanJobLog{cinp: service.cinp}
	result.SetID("/api/v1/Foreman/JobLog:"+id+":")
	return &result
}

// ForemanJobLogGet - Get function for Model JobLog
func (service *Contractor) ForemanJobLogGet(id string) (*ForemanJobLog, error) {
	//object := ForemanJobLog{cinp: service.cinp}

	object, err := service.cinp.Get("/api/v1/Foreman/JobLog:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*ForemanJobLog)
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model JobLog
func (object *ForemanJobLog) Create() error {
	if err := object.cinp.Create("/api/v1/Foreman/JobLog", object); err != nil {
		return err
	}

	return nil
}

// Update - Update function for Model JobLog
func (object *ForemanJobLog) Update(fieldList []string) error {
	if err := object.cinp.Update(object, fieldList); err != nil {
		return err
	}

	return nil
}

// Delete - Delete function for Model JobLog
func (object *ForemanJobLog) Delete() error {
	if err := object.cinp.Delete(object); err != nil {
		return err
	}

	return nil
}

// ForemanJobLogList - List function for Model JobLog
func (service *Contractor) ForemanJobLogList(filterName string, filterValues map[string]interface{}) <-chan *ForemanJobLog {
	in := service.cinp.ListObjects("/api/v1/Foreman/JobLog", reflect.TypeOf(ForemanJobLog{}), filterName, filterValues, 50)
	out := make(chan *ForemanJobLog)
	go func() {
		defer close(out)
		object, ok := (<-in).(*ForemanJobLog)
		if ok {
			out <- object
		}
	}()
	return out
}

func registerForeman(cinp *cinp.CInP) { 
	cinp.RegisterType("/api/v1/Foreman/BaseJob", reflect.TypeOf((*ForemanBaseJob)(nil)).Elem())
	cinp.RegisterType("/api/v1/Foreman/FoundationJob", reflect.TypeOf((*ForemanFoundationJob)(nil)).Elem())
	cinp.RegisterType("/api/v1/Foreman/StructureJob", reflect.TypeOf((*ForemanStructureJob)(nil)).Elem())
	cinp.RegisterType("/api/v1/Foreman/DependencyJob", reflect.TypeOf((*ForemanDependencyJob)(nil)).Elem())
	cinp.RegisterType("/api/v1/Foreman/JobLog", reflect.TypeOf((*ForemanJobLog)(nil)).Elem())
}